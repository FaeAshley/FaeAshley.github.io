Project Name:
Pet Care Platform

Tech Stack:
Python, Flask, PostgreSQL, SQLAlchemy, JavaScript, HTML/CSS

Description:
I developed a full-stack web application that connects pet owners with care providers. The platform features multi-role user authentication, dynamic booking logic, rich pet profiles, real-time messaging, and a full admin dashboard for managing users and disputes.

Key Features:
- Dynamic booking engine matching pet owners with providers based on availability and pet needs
- Real-time chat system built with AJAX and Flask
- Admin panel for approving providers, handling complaints, and managing platform settings

Interesting Challenges:
- Designing an intuitive multi-role system (owners vs providers vs admins) with clean permissions
- Building a flexible booking system that supports complex needs like multi-pet households and special care instructions

What I Learned:
- Advanced Flask blueprint structuring
- Best practices for scalable database design
- How to build user-centric admin controls for better platform health


Project Name:
Pinball Game Analysis Dashboard

Tech Stack:
Python, Streamlit, Pandas, Matplotlib, Scikit-learn, MySQL

Description:
I created an interactive dashboard that analyzes pinball tournament data to uncover trends in player performance and predict game outcomes. The project combines traditional data analysis with machine learning to deliver real-time insights for players and tournament organizers.

Key Features:
- Ingests raw matchplay tournament data into a MySQL database
- Visualizes player statistics, rankings, and game-specific trends with Streamlit dashboards
- Predicts game outcome types (win/loss patterns) using machine learning models (Scikit-learn)

Interesting Challenges:
- Cleaning and normalizing inconsistent tournament data into structured formats
- Designing machine learning features that accurately reflect pinball performance trends
- Optimizing dashboard responsiveness for large tournament datasets

What I Learned:
- How to apply machine learning techniques like classification and regression to real-world sports data
- Best practices for building interactive dashboards that scale with growing datasets
- Techniques for transforming raw event data into actionable insights


Project Name:
AI Portfolio Chatbot

Tech Stack:
Python, OpenAI API, Flask, LangChain, HTML/CSS (Frontend planned)

Description:
I'm building an AI-powered chatbot that lets visitors interact with my portfolio by asking questions about my experience, projects, skills, and learning journey. The chatbot uses natural language understanding to deliver personalized, context-aware answers based on my own documents and project history.

Key Features:
- Embeds resume, project summaries, and personal strengths into searchable knowledge vectors
- Allows users to ask freeform questions like "Tell me about Fae's experience with Flask" or "What projects has Fae built?"
- Plans to feature a live front-end interface for interactive chat on my portfolio site

Interesting Challenges:
- Structuring documents and project files into clean, easily chunked knowledge embeddings
- Designing prompt engineering flows that balance personality with professionalism
- Optimizing context retrieval for fast, accurate, and conversational responses

What I Learned:
- Practical use of LangChain for retrieval-augmented generation (RAG) systems
- How to structure knowledge bases for AI searchability
- How to integrate AI models into real-world applications to create delightful user experiences


Project Name:
Tic-Tac-Toe Game (React)

Tech Stack:
React, JavaScript, HTML/CSS

Description:
I built an interactive Tic-Tac-Toe game as part of my React learning journey, following and expanding on the official React.dev tutorial. The project demonstrates component-based design, state management, and user interaction handlingâ€”all core concepts for modern front-end development.

Key Features:
- Dynamic game board rendered through reusable React components
- State management with React hooks to track moves and determine a winner
- Game history feature allowing players to "time travel" to previous moves
- Clean, responsive UI for a smooth player experience

Interesting Challenges:
- Understanding how to lift state up to share data across multiple components
- Managing immutability in state updates to enable time-travel functionality
- Structuring components for maximum clarity and reusability

What I Learned:
- Fundamental principles of React architecture (components, props, state, lifting state up)
- How to manage user-driven application state changes in a scalable way
- How declarative UI programming creates more maintainable and predictable apps


Project Name:
Upcoming Project: Mood Tracker Powered by Natural Language Input

Tech Stack (Planned):
Python, OpenAI API, Flask (or FastAPI), PostgreSQL, React (Frontend)

Description:
I'm planning to develop a mood tracking application where users log daily journal entries or quick thoughts in natural language. The system will analyze the emotional tone using AI models and categorize moods over time, helping users visualize emotional trends and gain deeper insights into their well-being.

Key Features (Planned):
- Users submit freeform journal entries instead of selecting predefined mood options
- AI analyzes the sentiment and emotional tone of each entry to categorize mood
- Beautiful dashboards and graphs to track emotional trends over days, weeks, and months
- Private, secure account creation with optional daily reminders to log moods

Interesting Challenges (Anticipated):
- Designing prompts that accurately extract emotional nuance without overgeneralizing
- Storing user entries securely while ensuring GDPR-style privacy standards
- Building visualizations that are both beautiful and emotionally validating

What I Hope to Learn:
- How to fine-tune or better prompt LLMs for nuanced emotional sentiment detection
- Deeper full-stack skills with React, Flask/FastAPI, and PostgreSQL integration
- Best practices for designing apps that combine AI insights with user empathy






